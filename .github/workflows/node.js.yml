# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches-ignore:
      - "dependabot/*"

jobs:
  build:
    name: Building
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Get npm cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - uses: actions/cache@v3
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-v3-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm install

  deploy_dev:
    name: Deploy to Development
    if: ${{ github.ref == 'refs/heads/development' }}
    needs: [build]
    runs-on: ubuntu-latest
    environment: Development

    steps:
      - name: Serverless deploy
        uses: serverless/github-action@v3.1
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}

  deploy_stag:
    name: Deploy to Staging
    if: ${{ github.ref == 'refs/heads/staging' }}
    needs: [deploy_dev]
    runs-on: ubuntu-latest
    environment: Staging

    steps:
      - name: Npx SST Deploy Stag
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        run: |
          npm run deploy --stage stag

  deploy_prod:
    name: Deploy to Production
    if: ${{ github.ref == 'refs/heads/production' }}
    needs: [deploy_stag]
    runs-on: ubuntu-latest
    environment: Production

    steps:
      - name: Npx SST Deploy Prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        run: |
          npm run deploy --stage prod
